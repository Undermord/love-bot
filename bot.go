package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func StartBot() {
	bot, err := tgbotapi.NewBotAPI(botConfig.Token)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	log.Println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	go messageSender(bot)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			userName := update.Message.From.UserName
			if userName == "" {
				userName = "Unknown"
			}
			log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (@%s): %s", update.Message.Chat.ID, userName, update.Message.Text)
			handleMessage(bot, update.Message)
		}
	}
}

func messageSender(bot *tgbotapi.BotAPI) {

	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		for userID, userConfig := range botConfig.Users {
			if !userConfig.Active {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			}
			// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			location, err := time.LoadLocation(userConfig.TimeZone)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC", userID, err)
				location = time.UTC
			}

			now := time.Now().In(location)
			currentHour := now.Hour()
			currentMinute := now.Minute()
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
			if currentHour >= userConfig.StartTime && currentHour < userConfig.EndTime {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –æ—Ç–ø—Ä–∞–≤–∫–∏
				if currentMinute%userConfig.Interval == 0 {
					sendMessageToUser(bot, userID, userConfig)
				}
			}
		}
	}
}

func sendMessageToUser(bot *tgbotapi.BotAPI, userID int64, userConfig *UserConfig) {
	randomPhrase := userConfig.GetNextUniquePhrase()

	msg := tgbotapi.NewMessage(userID, randomPhrase)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (@%s): %v)", userID, userConfig.UserName, err)
	} else {
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (@%s): %s", userID, userConfig.UserName, randomPhrase)
	}

	saveUsers()
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	userID := message.Chat.ID
	userName := message.From.UserName
	if userName == "" {
		userName = "Unknown"
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	parts := strings.Split(message.Text, " ")
	command := parts[0]

	switch command {
	case "/start":
		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
		if _, exists := botConfig.Users[userID]; !exists {
			botConfig.Users[userID] = createDefaultUser(userID, userName)
			saveUsers()
		}

		botConfig.Users[userID].Active = true // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ
		saveUsers()

		msg := tgbotapi.NewMessage(userID,
			"–ü—Ä–∏–≤–µ—Ç! –î–æ–≤–µ—Ä—å—Å—è –º–Ω–µ, –∏ —è —Å–¥–µ–ª–∞—é —Ç–≤–æ–π –¥–µ–Ω—å —Ç–µ–ø–ª–µ–µ –∏ —è—Ä—á–µ üíï\n\n"+
				"–ù–∞—á–Ω—ë–º? –Ø –±—É–¥—É —Ä—è–¥–æ–º, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏:\n"+
				"/start üöÄ - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"+
				"/stop üõë - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"+
				"/test üì© - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"+
				"/settings ‚öôÔ∏è - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"+
				"/time start end ‚è∞- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—á–∞—Å—ã, 0-23)\n"+
				"/interval min ‚è≥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö\n"+
				"/help - ‚ùì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"+
				"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @undermord ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç! üíñ")

		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
		} else {
			log.Printf("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s)", userID, userName)
		}

	case "/stop":
		if _, exists := botConfig.Users[userID]; exists {
			botConfig.Users[userID].Active = false
			saveUsers()
			msg := tgbotapi.NewMessage(userID, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		} else {
			msg := tgbotapi.NewMessage(userID, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		}

	case "/test":
		if user, exists := botConfig.Users[userID]; exists {
			randomPhrase := user.GetNextUniquePhrase()

			msg := tgbotapi.NewMessage(userID, randomPhrase)
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (@%s): %v", userID, userName, err)
			} else {
				log.Printf("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (@%s): %s", userID, userName, randomPhrase)
			}
			saveUsers()
		} else {
			msg := tgbotapi.NewMessage(userID, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		}

	case "/settings":
		if user, exists := botConfig.Users[userID]; exists {
			msg := tgbotapi.NewMessage(userID, fmt.Sprintf(
				"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"+
					"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %v\n"+
					"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %d:00\n"+
					"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: %d:00\n"+
					"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: %d –º–∏–Ω—É—Ç\n"+
					"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: %s",
				user.Active, user.StartTime, user.EndTime, user.Interval, user.TimeZone))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		} else {
			msg := tgbotapi.NewMessage(userID, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		}

	case "/time":
		if len(parts) < 3 {
			msg := tgbotapi.NewMessage(userID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /time start end\n–ù–∞–ø—Ä–∏–º–µ—Ä: /time 8 22")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
			return
		}

		startTime, err1 := strconv.Atoi(parts[1])
		endTime, err2 := strconv.Atoi(parts[2])

		if err1 != nil || err2 != nil || startTime < 0 || startTime > 23 || endTime < 0 || endTime > 23 || startTime >= endTime {
			msg := tgbotapi.NewMessage(userID, "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Å—ã –æ—Ç 0 –¥–æ 23, –≥–¥–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
			return
		}

		if user, exists := botConfig.Users[userID]; exists {
			user.StartTime = startTime
			user.EndTime = endTime
			saveUsers()
			msg := tgbotapi.NewMessage(userID, fmt.Sprintf("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å %d:00 –¥–æ %d:00", startTime, endTime))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		} else {
			msg := tgbotapi.NewMessage(userID, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		}

	case "/interval":
		if len(parts) < 2 {
			msg := tgbotapi.NewMessage(userID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /interval minutes\n–ù–∞–ø—Ä–∏–º–µ—Ä: /interval 60")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
			return
		}

		interval, err := strconv.Atoi(parts[1])
		if err != nil || interval < 1 || interval > 1440 {
			msg := tgbotapi.NewMessage(userID, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞).")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
			return
		}

		if user, exists := botConfig.Users[userID]; exists {
			user.Interval = interval
			saveUsers()
			msg := tgbotapi.NewMessage(userID, fmt.Sprintf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %d –º–∏–Ω—É—Ç", interval))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		} else {
			msg := tgbotapi.NewMessage(userID, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
			}
		}

	case "/help":
		msg := tgbotapi.NewMessage(userID,
			"/start üöÄ - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"+
				"/stop üõë - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"+
				"/test üì© - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"+
				"/settings ‚öôÔ∏è - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"+
				"/time start end ‚è∞- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—á–∞—Å—ã, 0-23)\n"+
				"/interval min ‚è≥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö\n"+
				"/help - ‚ùì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"+
				"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @undermord ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç! üíñ")

		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d(@%s): %v", userID, userName, err)
		}

	default:
		msg := tgbotapi.NewMessage(userID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (@%s): %v", userID, userName, err)
		} else {
			log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (@%s): %s", userID, userName, msg.Text)
		}
	}
}
