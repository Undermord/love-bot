package main

import (
	"encoding/json"
	"log"
	"math/rand"
	"os"
	"time"
)

type UserConfig struct {
	UserId             int64
	UserName           string
	Message            string
	StartTime          int
	EndTime            int
	Interval           int
	Active             bool
	TimeZone           string
	location           *time.Location
	SentPhrasesIndices []int
}

type BotConfig struct {
	Token   string
	Users   map[int64]*UserConfig
	Phrases []string
}

var botConfig *BotConfig

func InitConfig(token string, users map[int64]*UserConfig) {
	botConfig = &BotConfig{
		Token: token,
		Users: users,
	}

	log.Println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	loadPhrases("phrases.json")
	loadUsers("users.json")
}

// –ó–∞–≥—Ä—É–∂–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *UserConfig) LoadLocation() error {
	loc, err := time.LoadLocation(u.TimeZone)
	if err != nil {
		return err
	}
	u.location = loc
	return nil
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
func (u *UserConfig) Now() time.Time {
	if u.location == nil {
		if err := u.LoadLocation(); err != nil {
			u.location = time.UTC
		}
	}
	return time.Now().In(u.location)
}

func loadPhrases(filename string) {
	data, err := os.ReadFile(filename)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ %s: %v", filename, err)
		botConfig.Phrases = []string{
			"üíñ –Ø –ª—é–±–ª—é —Ç–µ–±—è! üíñ",
			"üåü –¢—ã –æ—Å–æ–±–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! üåü",
			"üåπ –¢—ã —É–∫—Ä–∞—à–∞–µ—à—å –º–æ–π –¥–µ–Ω—å! üåπ",
		}
		return
	}

	err = json.Unmarshal(data, &botConfig.Phrases)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ —Ñ–∞–π–ª–∞ %s: %v", filename, err)
	}
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞ %s", len(botConfig.Phrases), filename)
}

func loadUsers(filename string) {
	data, err := os.ReadFile(filename)
	if err != nil {
		log.Printf("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω %s: %v", filename)
		return
	}

	var users map[int64]*UserConfig
	err = json.Unmarshal(data, &users)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π %s: %v", filename, err)
	}

	botConfig.Users = users

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	for _, user := range users {
		if err := user.LoadLocation(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC", user.UserId, err)
			user.location = time.UTC
		}
	}

	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª %s", len(users), filename)
}

func saveUsers() {
	data, err := json.MarshalIndent(botConfig.Users, "", "  ")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
	}

	err = os.WriteFile("users.json", data, 0644)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : %v", err)
		return
	}

	log.Printf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª users.json")
}

func createDefaultUser(userID int64, userName string) *UserConfig {
	user := &UserConfig{
		UserId:             userID,
		UserName:           userName,
		Message:            "üíñ –Ø –ª—é–±–ª—é —Ç–µ–±—è! üíñ",
		StartTime:          8,
		EndTime:            22,
		Interval:           120,
		Active:             true,
		TimeZone:           "Europe/Samara",
		SentPhrasesIndices: []int{},
	}

	if err := user.LoadLocation(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC", err)
		user.TimeZone = "UTC"
		user.location = time.UTC
	}
	return user
}

// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *UserConfig) GetNextUniquePhrase() string {
	if len(u.SentPhrasesIndices) >= len(botConfig.Phrases) {
		u.SentPhrasesIndices = []int{}
		log.Printf("–°–±—Ä–æ—Å —Ü–∏–∫–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d(@%s)", u.UserId, u.UserName)
	}
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
	var index int
	for {
		index = rand.Intn(len(botConfig.Phrases))
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å —Ä–∞–Ω–µ–µ
		used := false
		for _, sentIndex := range u.SentPhrasesIndices {
			if index == sentIndex {
				used = true
				break
			}
		}
		// –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É
		if !used {
			break
		}
	}
	u.SentPhrasesIndices = append(u.SentPhrasesIndices, index)

	return botConfig.Phrases[index]
}
